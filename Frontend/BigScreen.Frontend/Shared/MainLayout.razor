@using BigScreen.Frontend.Client.Security
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using BigScreen.Frontend.Client.Handlers.Interfaces
@using BigScreen.Frontend.Core.Exceptions
@using BigScreen.Core.Models.BigScreen
@inherits LayoutComponentBase
@inject NavigationManager Navigation
@inject SignOutSessionStateManager SignOutManager

<MudThemeProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar Elevation="0">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@DrawerToggle"/>
        <MudSpacer/>
        <AuthorizeView Policy="">
            <Authorized>
                <MudText Typo="Typo.h6">Hello, @context.User.Identity?.Name!</MudText>
                <MudIconButton Icon="@Icons.Material.Filled.AccountCircle" Color="Color.Inherit" OnClick="@RedirectToOwnAccount"></MudIconButton>
                <MudIconButton Icon="@Icons.Material.Filled.Logout" Color="Color.Inherit" OnClick="@BeginLogout"></MudIconButton>
            </Authorized>
            <NotAuthorized>
                <MudIconButton Icon="@Icons.Material.Filled.Login" Color="Color.Inherit" OnClick="@BeginLogin"></MudIconButton>
            </NotAuthorized>
        </AuthorizeView>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">BigScreen</MudText>
        </MudDrawerHeader>
        <NavMenu/>
    </MudDrawer>
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>

@code {

    [Inject]
    private UserState UserState { get; set; } = null!;

    [Inject]
    private IUserHandler UserHandler { get; set; } = null!;

    [Inject]
    private AuthenticationStateProvider AuthenticationStateProvider { get; set; } = null!;

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; } = null!;

    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    protected override async Task OnInitializedAsync()
    {
        AuthenticationStateProvider.AuthenticationStateChanged += async stateTask => await SetInternalAuthenticationStateAsync(stateTask);
        await SetInternalAuthenticationStateAsync(AuthenticationStateTask);
    }

    private async Task SetInternalAuthenticationStateAsync(Task<AuthenticationState> task)
    {
        var authenticationState = await task;
        if (authenticationState.User.Identity == null)
        {
            return;
        }

        try
        {
            UserState.User = await UserHandler.GetUser(authenticationState.GetUserId());
        }
        catch (UserDoesNotExistException)
        {
            UserState.User = await UserHandler.AddUser(new UserDto
            {
                Id = authenticationState.GetUserId(),
                Username = authenticationState.GetUsername(),
                SavedTopLists = new List<CachedTopListDto>
                {
                    new()
                    {
                        Id = "1",
                        Title = "My cached Toplist 1"
                    },
                    new()
                    {
                        Id = "2",
                        Title = "My cached Toplist 2"
                    },
                    new()
                    {
                        Id = "3",
                        Title = "My cached Toplist 3"
                    },
                    new()
                    {
                        Id = "4",
                        Title = "My cached Toplist 4"
                    }
                },
                Following = new List<CachedUserDto>
                {
                    new()
                    {
                        Id = "1",
                        Username = "Jose"
                    },
                    new()
                    {
                        Id = "3",
                        Username = "Jesus"
                    }
                }
            });
        }
    }

    private async Task RedirectToOwnAccount()
    {
        Navigation.NavigateTo($"account/{(await AuthenticationStateTask).GetUserId()}");
    }

    private async Task BeginLogout()
    {
        await SignOutManager.SetSignOutState();
        Navigation.NavigateTo("authentication/logout");
    }

    private void BeginLogin()
    {
        Navigation.NavigateTo("authentication/login");
    }

}