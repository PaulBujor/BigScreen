@typeparam TFilter

<MudGrid Justify="Justify.FlexEnd">
    @if (ViewModel.HasSearch)
    {
        <MudItem xs="12" md="10">
            <MudTextField @bind-Value="ViewModel.SearchQuery" Label="Search"
                          Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.Search" DebounceInterval="500"/>
        </MudItem>
    }
    <MudItem xs="12" md="2">
        <MudSelect T="TFilter" ValueChanged="async args => await ViewModel.OnFilterChanged(args)" Label="@DropdownLabel">
            @foreach (var option in FilterOptions!)
            {
                <MudSelectItem Value="@option">@option?.ToString()</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
    <MudItem xs="12">
        @if (ChildContent is not null)
        {
            <CascadingValue Value="ViewModel.GetCurrentFilter()">
                @ChildContent
            </CascadingValue>
        }
    </MudItem>
    <MudItem xs="12">
        @if (ViewModel.GetPaginationCount(PaginationCount!.Value) > 0)
        {
            <div class="d-flex justify-center">
                <MudPagination Count="@ViewModel.GetPaginationCount(PaginationCount!.Value)"
                               SelectedChanged="async args => await ViewModel.OnPageChanged(args)"/>
            </div>
        }
    </MudItem>
</MudGrid>